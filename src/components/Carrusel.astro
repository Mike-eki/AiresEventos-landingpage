---
import ArrowLeft from "../icons/ArrowLeft.astro";
import ArrowRight from "../icons/ArrowRight.astro";

// Definir la interfaz para las imágenes
interface ImageData {
  src: string;
  alt: string;
}

// Props del componente
interface Props {
  images: ImageData[];
}

const { images } = Astro.props;

// Generar un ID único para cada instancia del carrusel
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<nav class="scroll-layout" data-carousel={carouselId}>

  <button class="nav-button prev" aria-label="Imagen anterior">
    <ArrowLeft />
  </button>

  <menu class="carousel">
    <ul class="content">
      {images.map((image) => (
        <article class="card">
          <picture class="image-frame">
            <img src={image.src} alt={image.alt}>
          </picture>
        </article>
      ))}
    </ul>
  </menu>

  <button class="nav-button next" aria-label="Imagen siguiente">
    <ArrowRight />
  </button>
</nav>


<style>
  .scroll-layout {
    background-color: var(--light-beige);
    width: 100%;
    padding: 2rem 0;
    position: relative;
  }

  .carousel {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .content {
    display: flex;
    gap: 1.5rem;
    padding: 0 2rem;
    margin: 0;
    list-style: none;
    overflow-x: scroll;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;
    height: 32rem;
  }

  .content::-webkit-scrollbar {
    width: 16px;
  }

  .content::-webkit-scrollbar-track {
    background-color: transparent;
  }

  .content::-webkit-scrollbar-thumb {
    background-color: var(--violet-gum);
    border-radius: 100px;
  }

  .card {
    flex: 0 0 auto;
    width: 280px;
    scroll-snap-align: center;
    transition: transform 0.3s ease;
  }

  .image-frame {
    display: block;
    width: 100%;
    height: 350px;
    position: relative;
  }

  .image-frame img {
    width: 100%;
    height: 30rem;
    object-fit: cover;
    display: block;
    border-top-left-radius: 100rem;
    border-top-right-radius: 100rem;
    aspect-ratio: 9/16;
  }

  .nav-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: var(--violet-gum);
    border: none;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .nav-button:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transform: translateY(-50%) scale(1.1);
  }

  .nav-button:active {
    transform: translateY(-50%) scale(0.95);
  }

  .nav-button.prev {
    left: 0;
    border-top-right-radius: 100rem;
    border-bottom-right-radius: 100rem;
  }

  .nav-button.next {
    right: 0;
    border-top-left-radius: 100rem;
    border-bottom-left-radius: 100rem;
  }

  .nav-button:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    .card {
      width: 240px;
    }

    .image-frame {
      height: 300px;
    }

    .content {
      gap: 1rem;
      padding: 0 1rem;
    }
    .nav-button {
      width: 40px;
      height: 40px;
    }

    .nav-button.prev {
      left: 0.5rem;
    }

    .nav-button.next {
      right: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .card {
      width: 85vw;
    }

    .nav-button {
      width: 36px;
      height: 36px;
    }
  }
</style>

<script>
  // Seleccionar TODOS los carruseles en la página
  const carousels = document.querySelectorAll('.scroll-layout');

  carousels.forEach((scrollLayout) => {
    const carousel = scrollLayout.querySelector('.content');
    const prevBtn = scrollLayout.querySelector('.nav-button.prev') as HTMLButtonElement | null;
    const nextBtn = scrollLayout.querySelector('.nav-button.next') as HTMLButtonElement | null;
    const cards = scrollLayout.querySelectorAll('.card');

    if (carousel && prevBtn && nextBtn && cards.length > 0) {
      const cardWidth = (cards[0] as HTMLElement).offsetWidth;
      const gap = 24; // 1.5rem en px
      const scrollAmount = cardWidth + gap;

      // Función para actualizar el estado de los botones
      function updateButtons() {
        if (!carousel || !prevBtn || !nextBtn) return;
        const scrollLeft = carousel.scrollLeft;
        const maxScroll = carousel.scrollWidth - carousel.clientWidth;

        prevBtn.disabled = scrollLeft <= 0;
        nextBtn.disabled = scrollLeft >= maxScroll - 1;
      }

      // Navegar a la izquierda
      prevBtn.addEventListener('click', () => {
        carousel.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
      });

      // Navegar a la derecha
      nextBtn.addEventListener('click', () => {
        carousel.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
      });

      // Actualizar botones al hacer scroll
      carousel.addEventListener('scroll', updateButtons);

      // Actualizar botones al cargar
      updateButtons();

      // Actualizar al redimensionar la ventana
      window.addEventListener('resize', updateButtons);
    }
  });
</script>